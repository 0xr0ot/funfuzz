diff --git a/lib/webidl2.js b/lib/webidl2.js
index d5f61ae..bbc3d45 100644
--- a/lib/webidl2.js
+++ b/lib/webidl2.js
@@ -13,7 +13,11 @@
             }
         ,   types = []
         ;
-        for (var k in re) types.push(k);
+
+        // mozilla breaks enumeration-order assumption in JS_MORE_DETERMINISTIC builds
+        //for (var k in re) types.push(k);
+        types = ["float", "integer", "identifier", "string", "whitespace", "other"];
+
         while (str.length > 0) {
             var matched = false;
             for (var i = 0, n = types.length; i < n; i++) {
@@ -320,6 +324,7 @@
             if (eq) {
                 all_ws();
                 ret.rhs = consume(ID);
+                if (!ret.rhs) ret.rhs = consume(STR); // mozilla extension
                 if (!ret.rhs) return error("No right hand side to extended attribute assignment");
             }
             all_ws();
@@ -483,7 +488,7 @@
             }
             all_ws();
             ret.idlType = type() || error("No type in attribute");
-            if (ret.idlType.sequence) error("Attributes cannot accept sequence types");
+            //if (ret.idlType.sequence) error("Attributes cannot accept sequence types"); // mozilla extension allows this
             all_ws();
             var name = consume(ID) || error("No name in attribute");
             ret.name = name.value;
@@ -793,7 +798,7 @@
                 all_ws(store ? vals : null);
                 if (consume(OTHER, "}")) {
                     all_ws();
-                    if (saw_comma) error("Trailing comma in enum");
+                    //if (saw_comma) error("Trailing comma in enum"); // mozilla extension
                     consume(OTHER, ";") || error("No semicolon after enum");
                     return ret;
                 }
