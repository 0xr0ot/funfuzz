Just run:
./loopdomfuzz.py build

It will:
* Figure out which version of Firefox you are testing and use appropriate ignore lists.
* Create temporary Firefox profiles.
* Keep fuzzing new instances of Firefox until it finds a new bug.
* If it finds a bug, it will place a file in a wtmp*/ directory, and try to reduce it with Lithium.

|build| must be a directory, either:
* A Firefox object directory, built locally with --enable-tests
* A Tinderbox build that was downloaded using funfuzz/util/downloadBuild.py


Crashes:
* It's probably best if you compiled Firefox with --enable-breakpad and you have minidump_stackwalk installed, but the breakpad integration isn't fully working yet.
* On Mac, if you don't have breakpad et al set up, you'll want to turn off crash dialogs: defaults write com.apple.CrashReporter DialogType server

To reproduce a bug with the extension in place (usually not needed):
./rundomfuzz.py build url



For dedicated fuzzing machines (Mac only):

Add to /etc/sudoers (using "sudo visudo") to allow the script to "sudo reboot" without entering a password:
%admin ALL=(ALL)NOPASSWD: /sbin/reboot

In "General" System Preferences, ensure "Close windows when quitting an application" is checked OR change which line is commented out in mac-close-terminal.applescript.txt.  (This makes sure Terminal windows don't pile up, one per reboot.)

In "Users & Groups", enable "automatic login" and add macbot.command to your startup commands. This is essentially a shell script that opens a Terminal window first.

And that's it!  The script will update the fuzzing repository and download new builds from Tinderbox automatically.  It will reboot the machine every 12 hours or so, and store its results in ~/domfuzzjobs/.
